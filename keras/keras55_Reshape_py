import numpy as np
from keras.datasets import mnist
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, Reshape, Conv1D, LSTM
from sklearn.preprocessing import OneHotEncoder

(X_train, y_train), (X_test, y_test) = mnist.load_data()
# print(X_train.shape, y_train.shape) #(60000, 28, 28) (60000,)
# print(X_test.shape, y_test.shape)   #(10000, 28, 28) (10000,)

X_train = (X_train - 127.5) / 127.5
X_test = (X_test - 127.5) / 127.5


X_train = X_train.reshape(60000, 28, 28, 1)
X_test = X_test.reshape(10000, 28, 28, 1)

print(X_train.shape)
# print(y_test.shape)
y_train = y_train.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)

# print(np.unique(y_train, return_counts=True))


ohe = OneHotEncoder(sparse=False)
ohe.fit(y_train)
y_train = ohe.transform(y_train)
y_test = ohe.transform(y_test)

# print(y_train.shape)
#2
model = Sequential()
model.add(Dense(9, input_shape=(28,28,1)))                  # N, 28, 28, 9
# model.add(Conv2D(9, (2,2) , input_shape=(28,28,1)))
model.add(Conv2D(10, (3,3)))                                # N, 26, 26, 10
model.add(Reshape(target_shape=(26*26, 10)))                # N, 676, 10
model.add(Conv1D(15,4))                                     # N, 673, 15
model.add(LSTM(8, return_sequences=True))                   # N, 673, 8
model.add(Conv1D(14,2))                                     # N, 672 ,14
# model.add(Flatten())  #7260
# model.add(Reshape(target_shape=(7260, )))
# model.add(Reshape(target_shape=(22*22*15, )))
model.add(Dense(units=8))                                   # N, 672, 8
model.add(Dense(units=7))                                   # N, 672, 7
model.add(Flatten())  #7260                                 # N , 4704 
model.add(Dense(6))                                         # N, 6
model.add(Dense(10, activation='softmax'))                  # N, 10

model.summary()




# (kernal_size * kernal_size * chanels + bias) * filters 
# 1번째 레이어 : (2 * 2 * 1 + 1) * 9 = 45
# 2번째 레이어 : (3 * 3 * 9 + 1) * 10 = 820
# 3번쨰 레이어 : (4* 4 * 10 + 1) * 15 = 2415
# Flattten 레이어 : reshape만 할 뿐 연산은 0

#3
from keras.callbacks import EarlyStopping
es = EarlyStopping(monitor='val_loss', mode='auto', patience=30, verbose=1, restore_best_weights=True)
#3.  컴파일, 훈련
model.compile(loss='categorical_crossentropy', optimizer='adam' , metrics=['acc'])

import time
st = time.time()
model.fit(X_train, y_train, batch_size=128, verbose=1, epochs=10, validation_split=0.2, callbacks=[es])
et = time.time()

#4. 평가, 예측
results = model.evaluate(X_test, y_test)
print(results)
print('loss : ' , results[0])
print('acc : ' , results[1])
print("걸린 시간 : ", et - st)

# 기존
# loss :  0.3833778202533722
# acc :  0.9021000266075134
# 걸린 시간 :  5.834152460098267

